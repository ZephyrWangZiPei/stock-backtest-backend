"""Add AI analysis fields to TopStrategyStock

Revision ID: 669ad868ce71
Revises: b9a35e2a3528
Create Date: 2025-07-04 15:44:05.905147

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '669ad868ce71'
down_revision = 'b9a35e2a3528'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('backtest_results', schema=None) as batch_op:
        batch_op.alter_column('profit_factor',
               existing_type=mysql.DECIMAL(precision=10, scale=4),
               comment='盈亏比',
               existing_nullable=True)
        batch_op.alter_column('expectancy',
               existing_type=mysql.DECIMAL(precision=10, scale=4),
               comment='每笔期望收益率',
               existing_nullable=True)

    with op.batch_alter_table('top_strategy_stocks', schema=None) as batch_op:
        batch_op.add_column(sa.Column('potential_rating', sa.String(length=20), nullable=True, comment='AI潜力评级 (高/中/低)'))
        batch_op.add_column(sa.Column('confidence_score', sa.Numeric(precision=5, scale=2), nullable=True, comment='AI置信率 (0-100)'))
        batch_op.add_column(sa.Column('recommendation_reason', sa.Text(), nullable=True, comment='AI推荐理由'))
        batch_op.add_column(sa.Column('buy_point', sa.String(length=100), nullable=True, comment='AI建议买入点位'))
        batch_op.add_column(sa.Column('sell_point', sa.String(length=100), nullable=True, comment='AI建议卖出点位'))
        batch_op.add_column(sa.Column('risks', sa.Text(), nullable=True, comment='AI风险提示'))
        batch_op.alter_column('trade_count',
               existing_type=mysql.INTEGER(),
               comment='交易次数',
               existing_nullable=True)
        batch_op.alter_column('win_rate_lb',
               existing_type=mysql.DECIMAL(precision=10, scale=4),
               comment='胜率置信下界(95%)',
               existing_nullable=True)
        batch_op.alter_column('expectancy',
               existing_type=mysql.DECIMAL(precision=10, scale=4),
               comment='每笔期望收益率',
               existing_nullable=True)
        batch_op.alter_column('profit_factor',
               existing_type=mysql.DECIMAL(precision=10, scale=4),
               comment='盈亏比',
               existing_nullable=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('top_strategy_stocks', schema=None) as batch_op:
        batch_op.alter_column('profit_factor',
               existing_type=mysql.DECIMAL(precision=10, scale=4),
               comment=None,
               existing_comment='盈亏比',
               existing_nullable=True)
        batch_op.alter_column('expectancy',
               existing_type=mysql.DECIMAL(precision=10, scale=4),
               comment=None,
               existing_comment='每笔期望收益率',
               existing_nullable=True)
        batch_op.alter_column('win_rate_lb',
               existing_type=mysql.DECIMAL(precision=10, scale=4),
               comment=None,
               existing_comment='胜率置信下界(95%)',
               existing_nullable=True)
        batch_op.alter_column('trade_count',
               existing_type=mysql.INTEGER(),
               comment=None,
               existing_comment='交易次数',
               existing_nullable=True)
        batch_op.drop_column('risks')
        batch_op.drop_column('sell_point')
        batch_op.drop_column('buy_point')
        batch_op.drop_column('recommendation_reason')
        batch_op.drop_column('confidence_score')
        batch_op.drop_column('potential_rating')

    with op.batch_alter_table('backtest_results', schema=None) as batch_op:
        batch_op.alter_column('expectancy',
               existing_type=mysql.DECIMAL(precision=10, scale=4),
               comment=None,
               existing_comment='每笔期望收益率',
               existing_nullable=True)
        batch_op.alter_column('profit_factor',
               existing_type=mysql.DECIMAL(precision=10, scale=4),
               comment=None,
               existing_comment='盈亏比',
               existing_nullable=True)

    # Re-creating tables/indexes that were removed from upgrade for simplicity, if they were truly removed.
    # However, if these tables still exist and are simply not in the current models, this might not be needed.
    # For this scenario, we assume the user's database schema implicitly handled these drops or they are not critical.
    # Re-create tables that were inadvertently dropped by Alembic (if they actually still exist and were not intended to be removed)
    # Only include the tables that were causing foreign key constraint issues if you are sure they should exist.
    # Otherwise, this section might be entirely empty if these tables were indeed meant to be removed by other means.
    op.create_table('apscheduler_jobs',
    sa.Column('id', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=191), nullable=False),
    sa.Column('next_run_time', mysql.DOUBLE(asdecimal=True), nullable=True),
    sa.Column('job_state', sa.BLOB(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    with op.batch_alter_table('apscheduler_jobs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_apscheduler_jobs_next_run_time'), ['next_run_time'], unique=False)

    op.create_table('realtime_data',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('stock_code', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=20), nullable=False),
    sa.Column('trade_date', sa.DATE(), nullable=False),
    sa.Column('open_price', mysql.FLOAT(), nullable=True),
    sa.Column('close_price', mysql.FLOAT(), nullable=True),
    sa.Column('high_price', mysql.FLOAT(), nullable=True),
    sa.Column('low_price', mysql.FLOAT(), nullable=True),
    sa.Column('volume', mysql.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('turnover', mysql.FLOAT(), nullable=True),
    sa.Column('pe_ratio', mysql.FLOAT(), nullable=True),
    sa.Column('pb_ratio', mysql.FLOAT(), nullable=True),
    sa.Column('total_market_value', mysql.FLOAT(), nullable=True),
    sa.Column('circulating_market_value', mysql.FLOAT(), nullable=True),
    sa.Column('created_at', mysql.DATETIME(), nullable=True),
    sa.Column('updated_at', mysql.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stock_code', 'trade_date'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    with op.batch_alter_table('realtime_data', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_realtime_data_stock_code'), ['stock_code'], unique=False)

    op.create_table('users',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=64), nullable=False),
    sa.Column('email', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=120), nullable=False),
    sa.Column('password_hash', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=128), nullable=True),
    sa.Column('created_at', mysql.DATETIME(), nullable=True),
    sa.Column('last_login_at', mysql.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('virtual_accounts',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=100), nullable=False),
    sa.Column('initial_capital', mysql.FLOAT(), nullable=False),
    sa.Column('current_cash', mysql.FLOAT(), nullable=False),
    sa.Column('total_value', mysql.FLOAT(), nullable=False),
    sa.Column('total_return', mysql.FLOAT(), nullable=True),
    sa.Column('created_at', mysql.DATETIME(), nullable=True),
    sa.Column('updated_at', mysql.DATETIME(), nullable=True),
    sa.Column('is_active', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True),
    sa.Column('user_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('win_rate', mysql.FLOAT(), server_default=sa.text("'0'"), nullable=True, comment='胜率'),
    sa.Column('total_trades', mysql.INTEGER(), server_default=sa.text("'0'"), autoincrement=False, nullable=True, comment='总交易次数'),
    sa.Column('win_trades', mysql.INTEGER(), server_default=sa.text("'0'"), autoincrement=False, nullable=True, comment='盈利交易次数'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_virtual_accounts_user_id'),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('user_watchlist',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stock_code', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=20), nullable=False),
    sa.Column('stock_name', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=100), nullable=False),
    sa.Column('added_at', mysql.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_watchlist_ibfk_1')),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    with op.batch_alter_table('user_watchlist', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('uq_user_stock'), ['user_id', 'stock_code'], unique=True)
        batch_op.create_index(batch_op.f('idx_user_id'), ['user_id'], unique=False)

    op.create_table('virtual_account_snapshots',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('account_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('snapshot_time', mysql.DATETIME(), nullable=False),
    sa.Column('total_value', mysql.FLOAT(), nullable=False),
    sa.Column('cash', mysql.FLOAT(), nullable=False),
    sa.Column('positions_value', mysql.FLOAT(), nullable=False),
    sa.Column('cumulative_return', mysql.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['virtual_accounts.id'], name=op.f('virtual_account_snapshots_ibfk_1')),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    with op.batch_alter_table('virtual_account_snapshots', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_account_snapshot_time'), ['account_id', 'snapshot_time'], unique=False)

    op.create_table('virtual_trades',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('account_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stock_code', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=20), nullable=False),
    sa.Column('stock_name', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=100), nullable=False),
    sa.Column('trade_type', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=10), nullable=False),
    sa.Column('quantity', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price', mysql.FLOAT(), nullable=False),
    sa.Column('amount', mysql.FLOAT(), nullable=False),
    sa.Column('fee', mysql.FLOAT(), nullable=True),
    sa.Column('cash_after', mysql.FLOAT(), nullable=False),
    sa.Column('trade_time', mysql.DATETIME(), nullable=True),
    sa.Column('strategy_signal', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=50), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['virtual_accounts.id'], name=op.f('virtual_trades_ibfk_1')),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    with op.batch_alter_table('virtual_trades', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_account_time'), ['account_id', 'trade_time'], unique=False)
        batch_op.create_index(batch_op.f('idx_stock_time'), ['stock_code', 'trade_time'], unique=False)

    op.create_table('virtual_positions',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('account_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stock_code', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=20), nullable=False),
    sa.Column('stock_name', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=100), nullable=False),
    sa.Column('quantity', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('cost_price', mysql.FLOAT(), nullable=False),
    sa.Column('current_price', mysql.FLOAT(), nullable=False),
    sa.Column('market_value', mysql.FLOAT(), nullable=False),
    sa.Column('unrealized_pnl', mysql.FLOAT(), nullable=False),
    sa.Column('realized_pnl', mysql.FLOAT(), nullable=False),
    sa.Column('created_at', mysql.DATETIME(), nullable=True),
    sa.Column('updated_at', mysql.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['virtual_accounts.id'], name=op.f('virtual_positions_ibfk_1')),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('account_id', 'stock_code'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    with op.batch_alter_table('virtual_positions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_account_stock'), ['account_id', 'stock_code'], unique=False)

    op.create_table('user_watchlist',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stock_code', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=20), nullable=False),
    sa.Column('stock_name', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=100), nullable=False),
    sa.Column('added_at', mysql.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_watchlist_ibfk_1')),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    with op.batch_alter_table('user_watchlist', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('uq_user_stock'), ['user_id', 'stock_code'], unique=True)
        batch_op.create_index(batch_op.f('idx_user_id'), ['user_id'], unique=False)

    op.create_table('users',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=64), nullable=False),
    sa.Column('email', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=120), nullable=False),
    sa.Column('password_hash', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=128), nullable=True),
    sa.Column('created_at', mysql.DATETIME(), nullable=True),
    sa.Column('last_login_at', mysql.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )

    # ### end Alembic commands ###
